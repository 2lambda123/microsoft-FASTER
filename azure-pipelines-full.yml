variables:
- name: solution
  value: 'cs/FASTER.sln'
- name: solutionRemote
  value: 'cs/remote/FASTER.remote.sln'
- name: RunAzureTests
  value: 'yes'
schedules:
- cron: 0 4 * * 1,2,3,4,5
  branches:
    include:
    - master
name: $(date:yyyyMMdd)$(rev:.r)
stages:
- stage: __default
  jobs:
  - job: 'csharpWindows'
    pool:
      vmImage: windows-latest
    displayName: 'C# (Windows)'
    timeoutInMinutes: 75
    strategy:
      maxParallel: 2
      matrix:
        AnyCPU-Debug:
          buildPlatform: 'Any CPU'
          buildConfiguration: 'Debug'
        AnyCPU-Release:
          buildPlatform: 'Any CPU'
          buildConfiguration: 'Release'
        x64-Debug:
          buildPlatform: 'x64'
          buildConfiguration: 'Debug'
        x64-Release:
          buildPlatform: 'x64'
          buildConfiguration: 'Release'
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solutionRemote)'
    - task: VSBuild@1
      inputs:
        solution: '$(solutionRemote)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: PowerShell@2
      displayName: 'Download Azure Storage Emulator'
      inputs:
        targetType: inline
        script: 'Invoke-WebRequest -OutFile azure-storage-emulator.msi -Uri "https://go.microsoft.com/fwlink/?LinkId=717179&clcid=0x409"'
    - task: PowerShell@2
      displayName: 'Install Azure Storage Emulator'
      inputs:
        targetType: inline
        script: 'msiexec /passive /lvx installation.log /a azure-storage-emulator.msi TARGETDIR="C:\storage-emulator"'
    - task: CmdLine@2
      displayName: 'Init Test Db'
      inputs:
        script: '"C:\Program Files\Microsoft SQL Server\130\Tools\Binn\SqlLocalDB.exe" create "v13.0" 13.0 -s'
    - task: CmdLine@2
      displayName: 'Start Storage Emulator'
      inputs:
        script: '"C:\storage-emulator\root\Microsoft SDKs\Azure\Storage Emulator\AzureStorageEmulator.exe" start'
    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
          **\$(BuildConfiguration)\net46*\*test.dll
          **\$(BuildConfiguration)\**\net46*\*test.dll
          !**\*Microsoft.VisualStudio.TestPlatform*
          !**\obj\**
          !**\*TestAdapter.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.0'
    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
          **\$(BuildConfiguration)\netcoreapp2*\*test.dll
          **\$(BuildConfiguration)\**\netcoreapp2*\*test.dll
          !**\*Microsoft.VisualStudio.TestPlatform*
          !**\obj\**
          !**\*TestAdapter.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v2.2'
    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
          **\$(BuildConfiguration)\netcoreapp3*\*test.dll
          **\$(BuildConfiguration)\**\netcoreapp3*\*test.dll
          !**\*Microsoft.VisualStudio.TestPlatform*
          !**\obj\**
          !**\*TestAdapter.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v3.1'
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        searchFolder: '$(Agent.TempDirectory)'
  - job: 'cppWindows'
    pool:
      vmImage: vs2017-win2016
    displayName: 'C++ (Windows)'
    strategy:
      maxParallel: 2
      matrix:
        x64-Debug:
          buildPlatform: 'x64'
          buildConfiguration: 'Debug'
        x64-Release:
          buildPlatform: 'x64'
          buildConfiguration: 'Release'
    steps:
    - task: CMake@1
      displayName: 'CMake .. -G"Visual Studio 15 2017 Win64"'
      inputs:
        workingDirectory: 'cc/build'
        cmakeArgs: '.. -G"Visual Studio 15 2017 Win64"'
    - task: MSBuild@1
      displayName: 'Build solution cc/build/FASTER.sln'
      inputs:
        solution: 'cc/build/FASTER.sln'
        msbuildArguments: '/m /p:Configuration=$(buildConfiguration) /p:Platform=$(buildPlatform)'
    - task: CmdLine@2
      displayName: 'Run Ctest'
      inputs:
        script: 'ctest -j 1 --interactive-debug-mode 0 --output-on-failure -C $(buildConfiguration) -R "in_memory"'
        workingDirectory: 'cc/build'
  - job: 'cppLinux'
    pool:
      vmImage: ubuntu-latest
    displayName: 'C++ (Linux)'
    steps:
    - task: CmdLine@2
      displayName: 'Install depdendencies'
      inputs:
        script: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install -y g++-7 libaio-dev uuid-dev libtbb-dev
    - task: CmdLine@2
      displayName: 'Compile'
      inputs:
        script: |
          export CXX='g++-7'
          cd cc
          mkdir -p build/Debug build/Release
          cd build/Debug
          cmake -DCMAKE_BUILD_TYPE=Debug ../..
          make -j
          cd ../../build/Release
          cmake -DCMAKE_BUILD_TYPE=Release ../..
          make -j
    - task: CmdLine@2
      displayName: 'Run Tests (Debug)'
      inputs:
        script: |
          CTEST_OUTPUT_ON_FAILURE=1 make test
        workingDirectory: 'cc/build/Debug'
  - job: 'csharpLinux'
    pool:
      vmImage: ubuntu-latest
    displayName: 'C# (Linux)'
    steps:
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: '5.5.0'
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.201'
    - task: CmdLine@2
      displayName: 'Build'
      inputs:
        script: |
          mono --version
          msbuild /version
          msbuild /t:restore $(solution)
          msbuild /p:Configuration=Release $(solution)
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/test/*.csproj'
        arguments: '--configuration $(buildConfiguration) --framework netcoreapp3.1 -l "console;verbosity=detailed" --filter'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '*.trx'
        searchFolder: '$(Agent.TempDirectory)'

