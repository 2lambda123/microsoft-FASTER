variables:
  solution: 'cs/FASTER.sln'
  solutionRemote: 'cs/remote/FASTER.remote.sln'
  RunAzureTests: 'yes'

jobs:
- job: 'csharpWindows'
  pool:
    vmImage: windows-2022
  displayName: 'C# (Windows)'
  timeoutInMinutes: 75 

  strategy:
    maxParallel: 2
    matrix:
      AnyCPU-Debug:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Debug'
      AnyCPU-Release:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'
      x64-Debug:
        buildPlatform: 'x64'
        buildConfiguration: 'Debug'
      x64-Release:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'

  steps:
  - task: NodeTool@0
    inputs:
       versionSpec: 13.x

  - script : npm install -g azurite
    displayName: Install Azurite

  - script : start /B azurite
    displayName: Start Azurite

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/*.test.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test $(buildConfiguration)'
    inputs:
      command: test
      projects: '**/*.test.csproj'
      arguments: '--configuration $(buildConfiguration) -l "console;verbosity=detailed" --filter:TestCategory=Smoke'
      
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      searchFolder: '$(Agent.TempDirectory)'

- job: 'cppWindows'
  pool:
    vmImage: windows-2022
  displayName: 'C++ (Windows)'

  strategy:
    maxParallel: 2
    matrix:
      x64-Debug:
        buildPlatform: 'x64'
        buildConfiguration: 'Debug'
      x64-Release:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'

  steps:
  - task: CMake@1
    displayName: 'CMake .. -G"Visual Studio 17 2022"'
    inputs:
      workingDirectory: 'cc/build'
      cmakeArgs: '.. -G"Visual Studio 17 2022"'

  - task: MSBuild@1
    displayName: 'Build solution cc/build/FASTER.sln'
    inputs:
      solution: 'cc/build/FASTER.sln'
      msbuildArguments: '/m /p:Configuration=$(buildConfiguration) /p:Platform=$(buildPlatform)'

  - script: 'ctest -j 1 --interactive-debug-mode 0 --output-on-failure -C $(buildConfiguration) -R "in_memory"'
    workingDirectory: 'cc/build'
    displayName: 'Run Ctest'

- job: 'cppLinux'
  pool:
    vmImage: ubuntu-20.04
  displayName: 'C++ (Linux)'

  steps:
  - script: |
      sudo apt update
      sudo apt install -y g++ libaio-dev uuid-dev libtbb-dev
    displayName: 'Install depdendencies'
  - script: |
      git clone https://git.kernel.dk/liburing
      cd liburing
      git checkout liburing-0.7
      ./configure
      sudo make install
    displayName: Install Liburing

  - script: |
      cd cc
      mkdir -p build/Debug build/Release
      cd build/Debug
      cmake -DCMAKE_BUILD_TYPE=Debug -DUSE_URING=ON ../..
      make -j
      cd ../../build/Release
      cmake -DCMAKE_BUILD_TYPE=Release -DUSE_URING=ON ../..
      make -j
    displayName: 'Compile'
  - script: |
      CTEST_OUTPUT_ON_FAILURE=1 make test
    workingDirectory: 'cc/build/Debug'
    displayName: 'Run Tests (Debug)'

- job: 'csharpLinux'
  pool:
    vmImage: ubuntu-18.04
  displayName: 'C# (Linux)'

  strategy:
    maxParallel: 2
    matrix:
      AnyCPU-Debug:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Debug'
      AnyCPU-Release:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'

  steps:
  - bash: |
      sudo npm install -g azurite
      sudo mkdir azurite
      sudo azurite --silent --location azurite --debug azurite\debug.log &
    displayName: 'Install and Run Azurite'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/*.test.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test $(buildConfiguration)'
    env:
      RunAzureTests: yes
    inputs:
      command: test
      projects: '**/*.test.csproj'
      arguments: '--configuration $(buildConfiguration) -l "console;verbosity=detailed" --filter "TestCategory=Smoke"'
      
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '*.trx'
      searchFolder: '$(Agent.TempDirectory)'

# - job: 'cppBlobsWindows'
#   pool:
#     vmImage: windows-2022
#   displayName: 'C++ Blobs (Windows)'

#   strategy:
#     maxParallel: 2
#     matrix:
#       x64-Debug:
#         buildPlatform: 'x64'
#         buildConfiguration: 'Debug'
#       x64-Release:
#         buildPlatform: 'x64'
#         buildConfiguration: 'Release'

#   steps:
#   - task: CMake@1
#     displayName: 'CMake .. -G"Visual Studio 16 2019" -DUSE_BLOBS=ON'
#     inputs:
#       workingDirectory: 'cc/build'
#       cmakeArgs: '.. -G"Visual Studio 16 2019" -DUSE_BLOBS=ON'

#   - script: 'git clone https://github.com/microsoft/vcpkg'
#     workingDirectory: 'cc/build'
#     displayName: 'Download Vcpkg'

#   - script: '.\vcpkg\bootstrap-vcpkg.bat'
#     workingDirectory: 'cc/build'
#     displayName: 'Install Vcpkg'

#   - script: '.\vcpkg\vcpkg.exe install azure-storage-cpp:x64-windows'
#     workingDirectory: 'cc/build'
#     displayName: 'Install Azure dependencies'

#   - script: '.\vcpkg\vcpkg.exe integrate install'
#     workingDirectory: 'cc/build'
#     displayName: 'Integrate vcpkg with msbuild'

#   - task: MSBuild@1
#     displayName: 'Build solution cc/build/FASTER.sln'
#     inputs:
#       solution: 'cc/build/FASTER.sln'
#       msbuildArguments: '/m /p:Configuration=$(buildConfiguration) /p:Platform=$(buildPlatform)'

#   - script: |
#       ctest -j 1 --interactive-debug-mode 0 --output-on-failure -C $(buildConfiguration) -R "azure_test"
#       ctest -j 1 --interactive-debug-mode 0 --output-on-failure -C $(buildConfiguration) -R "storage_test"
#       ctest -j 1 --interactive-debug-mode 0 --output-on-failure -C $(buildConfiguration) -R "faster_blobs_example"
#     workingDirectory: 'cc/build'
#     displayName: 'Run Ctest'

# - job: 'cppBlobsLinux'
#   pool:
#     vmImage: ubuntu-18.04
#   displayName: 'C++ Blobs (Linux)'

#   steps:
#   - script: |
#       sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
#       sudo apt update
#       sudo apt install -y libaio-dev uuid-dev libtbb-dev npm
#     displayName: 'Install dependencies'

#   - script: |
#       sudo ./scripts/linux/azure/blob.sh
#     workingDirectory: 'cc'
#     displayName: 'Install Azure dependencies'

#   - script: |
#       cd cc
#       mkdir -p build/Debug build/Release
#       cd build/Debug
#       cmake -DCMAKE_BUILD_TYPE=Debug -DUSE_BLOBS=ON ../..
#       make -j
#       cd ../../build/Release
#       cmake -DCMAKE_BUILD_TYPE=Release -DUSE_BLOBS=ON ../..
#       make -j
#     displayName: 'Compile'

#   - script: |
#       sudo npm install -g azurite
#       azurite -s &
#     displayName: 'Install and launch azurite (linux storage emulator)'

#   - script: |
#       export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
#       CTEST_OUTPUT_ON_FAILURE=1 make test
#     workingDirectory: 'cc/build/Debug'
#     displayName: 'Run Tests (Debug)'
